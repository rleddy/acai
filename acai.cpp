#define YY_Parser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from acai.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#define YY_Parser_LSP_NEEDED 
#define YY_Parser_MEMBERS  \
          virtual ~Parser() {} \
          private: \
                yyFlexLexer lexer;
#define YY_Parser_LEX_BODY  {return lexer.yylex();}
#define YY_Parser_ERROR_BODY  {cerr << "error encountered at line: "<<lexer.lineno()<<"last word parsed:"<<lexer.YYText()<<"\n";}
#line 12 "acai.y"

#include <iostream>
#include <fstream>
#include <FlexLexer.h>
#include <stdlib.h>
using namespace std;

#line 21 "acai.y"
typedef union {
                int i_type;
} yy_Parser_stype;
#define YY_Parser_STYPE yy_Parser_stype

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_Parser_BISON 1

#ifndef YY_Parser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_Parser_COMPATIBILITY 1
 #else
  #define  YY_Parser_COMPATIBILITY 0
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_Parser_LTYPE
   #define YY_Parser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_Parser_STYPE 
   #define YY_Parser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_Parser_DEBUG
   #define  YY_Parser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_Parser_USE_GOTO
  #define YY_Parser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_Parser_USE_GOTO
 #define YY_Parser_USE_GOTO 0
#endif

#ifndef YY_Parser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_Parser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_Parser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_Parser_DEBUG */
#endif


#ifndef YY_Parser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_Parser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_Parser_LSP_NEEDED
#ifndef YY_Parser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_Parser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_Parser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_Parser_STYPE
#define YY_Parser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_Parser_PARSE
#define YY_Parser_PARSE yyparse
#endif
#ifndef YY_Parser_LEX
#define YY_Parser_LEX yylex
#endif
#ifndef YY_Parser_LVAL
#define YY_Parser_LVAL yylval
#endif
#ifndef YY_Parser_LLOC
#define YY_Parser_LLOC yylloc
#endif
#ifndef YY_Parser_CHAR
#define YY_Parser_CHAR yychar
#endif
#ifndef YY_Parser_NERRS
#define YY_Parser_NERRS yynerrs
#endif
#ifndef YY_Parser_DEBUG_FLAG
#define YY_Parser_DEBUG_FLAG yydebug
#endif
#ifndef YY_Parser_ERROR
#define YY_Parser_ERROR yyerror
#endif

#ifndef YY_Parser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_Parser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_Parser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_Parser_PARSE_PARAM
  #define YY_Parser_PARSE_PARAM void
 #endif
#endif

#if YY_Parser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_Parser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_Parser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_Parser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_Parser_PURE
#  ifndef YYPURE
#    define YYPURE YY_Parser_PURE
#  endif
#endif

#ifdef YY_Parser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_Parser_DEBUG 
#  endif
#endif

#ifndef YY_Parser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_Parser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_Parser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_Parser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	VAR_BINDER_EXPRESSION	258
#define	REG_EXPER	259
#define	VARIABLE	260
#define	ATOMIC_VARIABLE	261
#define	NUMBER	262
#define	STRING_LITERAL	263
#define	FLOAT_LITERAL	264
#define	INT_LITERAL	265
#define	FUNCTION_NAME	266
#define	ARROW_RIGHT	267
#define	TYPE_NAME	268
#define	BUILTIN_TYPE	269
#define	CONST	270
#define	CONST_SYMBOL	271
#define	DOT	272
#define	KEYWORD	273
#define	COMPILED_SIGN	274
#define	BUILT_IN_FUNCTION_TYPE	275
#define	TYPE_SYN_CONTEXT	276
#define	FIELD_TYPE	277
#define	DIMENSION	278
#define	REF_SYMBOL	279
#define	ORDER_SYMBOL	280
#define	COMPETITION_SPEC	281
#define	OPEN_ABSRTRACT_TYPE_SCHEMA	282
#define	CLOSE_ABSRTRACT_TYPE_SCHEMA	283
#define	FUNCTION_MAP_INTRODUCER	284
#define	EQUALS	285
#define	RIGHT_ARROW	286
#define	HASH_OPEN	287
#define	HASH_CLOSE	288
#define	ODERING_PREDICATE_OPEN	289
#define	ODERING_PREDICATE_CLOSE	290
#define	GENERATION_SEPERATOR	291
#define	CARDINALITY_RESTRICTION_SYMBOL	292
#define	MAP_MEMBER_INTRODUCER	293
#define	DEREF_CONTAINER_SYMBOL	294
#define	OPEN_TYPE_MACHTER	295
#define	CLOSE_TYPE_MACHTER	296
#define	OPEN_REGEXP_MATCHER	297
#define	CLOSE_REGEXP_MATCHER	298
#define	OPEN_WORKING_MEMORY_MATCHER	299
#define	CLOSE_WORKING_MEMORY_MATCHER	300
#define	OPEN_MEMBERSHIP_TEST_MATCHER	301
#define	CLOSE_MEMBERSHIP_TEST_MATCHER	302
#define	RANGE_INDICATOR_SYMBOL	303
#define	STEPPER_INTRODUCER_SYMBOL	304
#define	TYPE_OBJECT_CONTEXT	305
#define	TYPE_PARTIAL_CONTEXT	306
#define	TYPE_ABSTRACTION_CONTEXT	307
#define	DERIVATION_KEY_WORD	308
#define	TYPE_REPLACEMENT_VARIABLE	309
#define	MEMBER_VARIABLE	310
#define	UNARY_OP	311
#define	DEREF	312
#define	ARITHMETIC_OP	313


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_Parser_CLASS
#define YY_Parser_CLASS Parser
#endif
#ifndef YY_Parser_INHERIT
#define YY_Parser_INHERIT
#endif
#ifndef YY_Parser_MEMBERS
#define YY_Parser_MEMBERS 
#endif
#ifndef YY_Parser_LEX_BODY
#define YY_Parser_LEX_BODY  
#endif
#ifndef YY_Parser_ERROR_BODY
#define YY_Parser_ERROR_BODY  
#endif
#ifndef YY_Parser_CONSTRUCTOR_PARAM
#define YY_Parser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_Parser_CONSTRUCTOR_CODE
#define YY_Parser_CONSTRUCTOR_CODE
#endif
#ifndef YY_Parser_CONSTRUCTOR_INIT
#define YY_Parser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_Parser_USE_CONST_TOKEN
#define YY_Parser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_Parser_USE_CONST_TOKEN != 0
#ifndef YY_Parser_ENUM_TOKEN
#define YY_Parser_ENUM_TOKEN yy_Parser_enum_token
#endif
#endif

class YY_Parser_CLASS YY_Parser_INHERIT
{
public: 
#if YY_Parser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int VAR_BINDER_EXPRESSION;
static const int REG_EXPER;
static const int VARIABLE;
static const int ATOMIC_VARIABLE;
static const int NUMBER;
static const int STRING_LITERAL;
static const int FLOAT_LITERAL;
static const int INT_LITERAL;
static const int FUNCTION_NAME;
static const int ARROW_RIGHT;
static const int TYPE_NAME;
static const int BUILTIN_TYPE;
static const int CONST;
static const int CONST_SYMBOL;
static const int DOT;
static const int KEYWORD;
static const int COMPILED_SIGN;
static const int BUILT_IN_FUNCTION_TYPE;
static const int TYPE_SYN_CONTEXT;
static const int FIELD_TYPE;
static const int DIMENSION;
static const int REF_SYMBOL;
static const int ORDER_SYMBOL;
static const int COMPETITION_SPEC;
static const int OPEN_ABSRTRACT_TYPE_SCHEMA;
static const int CLOSE_ABSRTRACT_TYPE_SCHEMA;
static const int FUNCTION_MAP_INTRODUCER;
static const int EQUALS;
static const int RIGHT_ARROW;
static const int HASH_OPEN;
static const int HASH_CLOSE;
static const int ODERING_PREDICATE_OPEN;
static const int ODERING_PREDICATE_CLOSE;
static const int GENERATION_SEPERATOR;
static const int CARDINALITY_RESTRICTION_SYMBOL;
static const int MAP_MEMBER_INTRODUCER;
static const int DEREF_CONTAINER_SYMBOL;
static const int OPEN_TYPE_MACHTER;
static const int CLOSE_TYPE_MACHTER;
static const int OPEN_REGEXP_MATCHER;
static const int CLOSE_REGEXP_MATCHER;
static const int OPEN_WORKING_MEMORY_MATCHER;
static const int CLOSE_WORKING_MEMORY_MATCHER;
static const int OPEN_MEMBERSHIP_TEST_MATCHER;
static const int CLOSE_MEMBERSHIP_TEST_MATCHER;
static const int RANGE_INDICATOR_SYMBOL;
static const int STEPPER_INTRODUCER_SYMBOL;
static const int TYPE_OBJECT_CONTEXT;
static const int TYPE_PARTIAL_CONTEXT;
static const int TYPE_ABSTRACTION_CONTEXT;
static const int DERIVATION_KEY_WORD;
static const int TYPE_REPLACEMENT_VARIABLE;
static const int MEMBER_VARIABLE;
static const int UNARY_OP;
static const int DEREF;
static const int ARITHMETIC_OP;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_Parser_ENUM_TOKEN { YY_Parser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,VAR_BINDER_EXPRESSION=258
	,REG_EXPER=259
	,VARIABLE=260
	,ATOMIC_VARIABLE=261
	,NUMBER=262
	,STRING_LITERAL=263
	,FLOAT_LITERAL=264
	,INT_LITERAL=265
	,FUNCTION_NAME=266
	,ARROW_RIGHT=267
	,TYPE_NAME=268
	,BUILTIN_TYPE=269
	,CONST=270
	,CONST_SYMBOL=271
	,DOT=272
	,KEYWORD=273
	,COMPILED_SIGN=274
	,BUILT_IN_FUNCTION_TYPE=275
	,TYPE_SYN_CONTEXT=276
	,FIELD_TYPE=277
	,DIMENSION=278
	,REF_SYMBOL=279
	,ORDER_SYMBOL=280
	,COMPETITION_SPEC=281
	,OPEN_ABSRTRACT_TYPE_SCHEMA=282
	,CLOSE_ABSRTRACT_TYPE_SCHEMA=283
	,FUNCTION_MAP_INTRODUCER=284
	,EQUALS=285
	,RIGHT_ARROW=286
	,HASH_OPEN=287
	,HASH_CLOSE=288
	,ODERING_PREDICATE_OPEN=289
	,ODERING_PREDICATE_CLOSE=290
	,GENERATION_SEPERATOR=291
	,CARDINALITY_RESTRICTION_SYMBOL=292
	,MAP_MEMBER_INTRODUCER=293
	,DEREF_CONTAINER_SYMBOL=294
	,OPEN_TYPE_MACHTER=295
	,CLOSE_TYPE_MACHTER=296
	,OPEN_REGEXP_MATCHER=297
	,CLOSE_REGEXP_MATCHER=298
	,OPEN_WORKING_MEMORY_MATCHER=299
	,CLOSE_WORKING_MEMORY_MATCHER=300
	,OPEN_MEMBERSHIP_TEST_MATCHER=301
	,CLOSE_MEMBERSHIP_TEST_MATCHER=302
	,RANGE_INDICATOR_SYMBOL=303
	,STEPPER_INTRODUCER_SYMBOL=304
	,TYPE_OBJECT_CONTEXT=305
	,TYPE_PARTIAL_CONTEXT=306
	,TYPE_ABSTRACTION_CONTEXT=307
	,DERIVATION_KEY_WORD=308
	,TYPE_REPLACEMENT_VARIABLE=309
	,MEMBER_VARIABLE=310
	,UNARY_OP=311
	,DEREF=312
	,ARITHMETIC_OP=313


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_Parser_PARSE (YY_Parser_PARSE_PARAM);
 virtual void YY_Parser_ERROR(char *msg) YY_Parser_ERROR_BODY;
#ifdef YY_Parser_PURE
#ifdef YY_Parser_LSP_NEEDED
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL,YY_Parser_LTYPE *YY_Parser_LLOC) YY_Parser_LEX_BODY;
#else
 virtual int  YY_Parser_LEX (YY_Parser_STYPE *YY_Parser_LVAL) YY_Parser_LEX_BODY;
#endif
#else
 virtual int YY_Parser_LEX() YY_Parser_LEX_BODY;
 YY_Parser_STYPE YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
 YY_Parser_LTYPE YY_Parser_LLOC;
#endif
 int   YY_Parser_NERRS;
 int    YY_Parser_CHAR;
#endif
#if YY_Parser_DEBUG != 0
 int YY_Parser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM);
public:
 YY_Parser_MEMBERS 
};
/* other declare folow */
#if YY_Parser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_Parser_CLASS::VAR_BINDER_EXPRESSION=258;
const int YY_Parser_CLASS::REG_EXPER=259;
const int YY_Parser_CLASS::VARIABLE=260;
const int YY_Parser_CLASS::ATOMIC_VARIABLE=261;
const int YY_Parser_CLASS::NUMBER=262;
const int YY_Parser_CLASS::STRING_LITERAL=263;
const int YY_Parser_CLASS::FLOAT_LITERAL=264;
const int YY_Parser_CLASS::INT_LITERAL=265;
const int YY_Parser_CLASS::FUNCTION_NAME=266;
const int YY_Parser_CLASS::ARROW_RIGHT=267;
const int YY_Parser_CLASS::TYPE_NAME=268;
const int YY_Parser_CLASS::BUILTIN_TYPE=269;
const int YY_Parser_CLASS::CONST=270;
const int YY_Parser_CLASS::CONST_SYMBOL=271;
const int YY_Parser_CLASS::DOT=272;
const int YY_Parser_CLASS::KEYWORD=273;
const int YY_Parser_CLASS::COMPILED_SIGN=274;
const int YY_Parser_CLASS::BUILT_IN_FUNCTION_TYPE=275;
const int YY_Parser_CLASS::TYPE_SYN_CONTEXT=276;
const int YY_Parser_CLASS::FIELD_TYPE=277;
const int YY_Parser_CLASS::DIMENSION=278;
const int YY_Parser_CLASS::REF_SYMBOL=279;
const int YY_Parser_CLASS::ORDER_SYMBOL=280;
const int YY_Parser_CLASS::COMPETITION_SPEC=281;
const int YY_Parser_CLASS::OPEN_ABSRTRACT_TYPE_SCHEMA=282;
const int YY_Parser_CLASS::CLOSE_ABSRTRACT_TYPE_SCHEMA=283;
const int YY_Parser_CLASS::FUNCTION_MAP_INTRODUCER=284;
const int YY_Parser_CLASS::EQUALS=285;
const int YY_Parser_CLASS::RIGHT_ARROW=286;
const int YY_Parser_CLASS::HASH_OPEN=287;
const int YY_Parser_CLASS::HASH_CLOSE=288;
const int YY_Parser_CLASS::ODERING_PREDICATE_OPEN=289;
const int YY_Parser_CLASS::ODERING_PREDICATE_CLOSE=290;
const int YY_Parser_CLASS::GENERATION_SEPERATOR=291;
const int YY_Parser_CLASS::CARDINALITY_RESTRICTION_SYMBOL=292;
const int YY_Parser_CLASS::MAP_MEMBER_INTRODUCER=293;
const int YY_Parser_CLASS::DEREF_CONTAINER_SYMBOL=294;
const int YY_Parser_CLASS::OPEN_TYPE_MACHTER=295;
const int YY_Parser_CLASS::CLOSE_TYPE_MACHTER=296;
const int YY_Parser_CLASS::OPEN_REGEXP_MATCHER=297;
const int YY_Parser_CLASS::CLOSE_REGEXP_MATCHER=298;
const int YY_Parser_CLASS::OPEN_WORKING_MEMORY_MATCHER=299;
const int YY_Parser_CLASS::CLOSE_WORKING_MEMORY_MATCHER=300;
const int YY_Parser_CLASS::OPEN_MEMBERSHIP_TEST_MATCHER=301;
const int YY_Parser_CLASS::CLOSE_MEMBERSHIP_TEST_MATCHER=302;
const int YY_Parser_CLASS::RANGE_INDICATOR_SYMBOL=303;
const int YY_Parser_CLASS::STEPPER_INTRODUCER_SYMBOL=304;
const int YY_Parser_CLASS::TYPE_OBJECT_CONTEXT=305;
const int YY_Parser_CLASS::TYPE_PARTIAL_CONTEXT=306;
const int YY_Parser_CLASS::TYPE_ABSTRACTION_CONTEXT=307;
const int YY_Parser_CLASS::DERIVATION_KEY_WORD=308;
const int YY_Parser_CLASS::TYPE_REPLACEMENT_VARIABLE=309;
const int YY_Parser_CLASS::MEMBER_VARIABLE=310;
const int YY_Parser_CLASS::UNARY_OP=311;
const int YY_Parser_CLASS::DEREF=312;
const int YY_Parser_CLASS::ARITHMETIC_OP=313;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_Parser_CLASS::token */
#endif
/*apres const  */
YY_Parser_CLASS::YY_Parser_CLASS(YY_Parser_CONSTRUCTOR_PARAM) YY_Parser_CONSTRUCTOR_INIT
{
#if YY_Parser_DEBUG != 0
YY_Parser_DEBUG_FLAG=0;
#endif
YY_Parser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		374
#define	YYFLAG		-32768
#define	YYNTBASE	77

#define YYTRANSLATE(x) ((unsigned)(x) <= 313 ? yytranslate[x] : 161)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    72,     2,     2,    76,     2,    59,
    60,    73,     2,    63,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    71,    66,    64,
     2,    65,     2,    75,     2,     2,    67,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    68,     2,    69,     2,     2,    74,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    61,    70,    62,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58
};

#if YY_Parser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     9,    11,    13,    15,    17,    19,
    27,    32,    34,    39,    41,    43,    49,    53,    55,    62,
    64,    68,    71,    75,    77,    81,    83,    88,    90,    92,
    95,    99,   102,   106,   108,   110,   112,   114,   118,   120,
   124,   126,   130,   133,   137,   139,   141,   143,   147,   149,
   152,   154,   158,   160,   163,   166,   170,   175,   179,   183,
   185,   187,   191,   195,   197,   199,   203,   205,   207,   211,
   214,   219,   221,   223,   225,   227,   229,   241,   243,   244,
   252,   259,   261,   266,   270,   274,   278,   282,   286,   288,
   292,   296,   300,   302,   314,   320,   326,   333,   339,   343,
   348,   352,   354,   360,   367,   373,   380,   382,   385,   389,
   392,   394,   397,   400,   404,   406,   408,   412,   418,   422,
   424,   426,   430,   434,   436,   439,   441,   444,   446,   448,
   451,   453,   456,   459,   463,   465,   467,   470,   474,   478,
   483,   486,   488,   492,   494,   496,   500,   504,   508,   510,
   514,   517,   520,   522,   524,   526,   528,   530,   532,   534,
   536,   539,   542,   546,   551,   555,   559,   564,   566,   570,
   574,   578,   582,   586,   591,   593,   597,   599,   603,   605,
   607,   609
};

static const short yyrhs[] = {    78,
     0,    79,     0,    79,    78,     0,    80,     0,    81,     0,
    82,     0,    84,     0,    86,     0,    87,     0,    95,    59,
    91,    60,    61,    96,    62,     0,    95,    59,    91,    60,
     0,   109,     0,   114,    27,    79,    28,     0,   113,     0,
   111,     0,    11,    29,   102,    12,    83,     0,   103,    12,
    88,     0,    88,     0,    19,    20,    11,    30,    11,    85,
     0,    80,     0,    59,    93,    60,     0,    88,    94,     0,
     5,    30,   110,     0,    90,     0,    90,    63,    87,     0,
    13,     0,   115,    64,    92,    65,     0,    14,     0,     5,
     0,     5,   101,     0,   159,     5,   101,     0,   159,     5,
     0,    15,    16,   101,     0,    93,     0,   118,     0,    16,
     0,    88,     0,    88,    63,    92,     0,   150,     0,    93,
    63,   150,     0,    89,     0,    89,    63,    94,     0,    17,
    18,     0,    17,    18,    95,     0,    97,     0,   108,     0,
   146,     0,   146,    66,    97,     0,   116,     0,   116,    98,
     0,    23,     0,    23,    63,    99,     0,   126,     0,   126,
   100,     0,    30,   146,     0,    64,    92,    65,     0,    67,
    64,   104,    65,     0,    88,    63,   104,     0,   150,    63,
   104,     0,    88,     0,   150,     0,    88,    63,   105,     0,
    54,    63,   105,     0,    88,     0,    54,     0,    54,    63,
   105,     0,    54,     0,   142,     0,   142,    63,   107,     0,
    26,    98,     0,    21,    13,    30,    88,     0,   155,     0,
   156,     0,     8,     0,     9,     0,    10,     0,    50,    13,
    30,    17,    53,    59,   112,    60,    61,    79,    62,     0,
    92,     0,     0,    51,    13,    30,   115,    64,   105,    65,
     0,    52,   115,    64,   106,    65,    30,     0,    13,     0,
    22,    61,   146,    62,     0,   151,    31,   117,     0,   152,
    31,   117,     0,   153,    31,   117,     0,   154,    31,   117,
     0,    61,    96,    62,     0,   121,     0,    68,   119,    69,
     0,    61,   119,    62,     0,    59,   119,    60,     0,   120,
     0,   141,    68,   125,    70,   128,    69,    68,   125,    70,
   128,    69,     0,    61,   125,    70,   128,    62,     0,    59,
   125,    70,   128,    60,     0,    32,   124,   125,    70,   128,
    33,     0,    32,   125,    70,   128,    33,     0,    32,   107,
    33,     0,    61,   124,   107,    62,     0,    61,   107,    62,
     0,   133,     0,    68,   150,    48,   150,    69,     0,    68,
   150,    48,   150,    69,   132,     0,    68,   150,    63,   150,
    69,     0,    68,   150,    63,   150,    69,   132,     0,   122,
     0,   145,    80,     0,     5,    71,   123,     0,    71,   123,
     0,     5,     0,    24,     5,     0,    80,    72,     0,    59,
   100,    60,     0,   143,     0,    73,     0,     5,    71,   127,
     0,     5,    71,    88,    71,   127,     0,     5,    71,    88,
     0,     5,     0,    88,     0,    34,    25,    35,     0,   129,
    36,   128,     0,   129,     0,     5,   130,     0,    89,     0,
    89,   131,     0,   134,     0,    80,     0,    80,   130,     0,
    89,     0,    89,   131,     0,    49,   150,     0,   134,    37,
   137,     0,   136,     0,   135,     0,    74,   136,     0,    61,
    13,    62,     0,    61,     5,    62,     0,    11,    59,   138,
    60,     0,    72,   136,     0,   140,     0,   140,    63,   139,
     0,    73,     0,   146,     0,    64,    99,    65,     0,   146,
    38,   146,     0,   144,    38,     5,     0,     6,     0,     6,
    63,   144,     0,     5,    30,     0,    75,    30,     0,    30,
     0,     7,     0,     8,     0,     5,     0,   147,     0,   134,
     0,   149,     0,    80,     0,     5,   148,     0,    57,    55,
     0,    57,    55,   148,     0,    11,    59,   139,    60,     0,
   146,    58,   146,     0,    59,   146,    60,     0,    56,    59,
   146,    60,     0,   146,     0,    40,    92,    41,     0,    42,
     4,    43,     0,    44,     3,    45,     0,    46,    80,    47,
     0,    68,   158,    69,     0,   141,    68,   157,    69,     0,
   158,     0,   158,    66,   157,     0,   150,     0,   150,    63,
   150,     0,    76,     0,   160,     0,    39,     0,    39,   160,
     0
};

#endif

#if (YY_Parser_DEBUG != 0) || defined(YY_Parser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   120,   124,   126,   131,   131,   131,   131,   131,   131,   145,
   147,   163,   165,   166,   167,   178,   184,   186,   191,   197,
   199,   212,   214,   225,   227,   243,   245,   246,   251,   253,
   254,   255,   260,   270,   272,   273,   286,   288,   293,   295,
   301,   303,   310,   312,   317,   319,   323,   325,   330,   332,
   338,   340,   344,   346,   360,   366,   373,   379,   381,   382,
   383,   388,   390,   391,   392,   397,   399,   405,   407,   414,
   426,   435,   437,   438,   439,   440,   452,   458,   460,   469,
   482,   487,   489,   501,   503,   504,   505,   509,   518,   520,
   521,   522,   523,   533,   536,   537,   538,   539,   540,   541,
   542,   543,   549,   551,   552,   553,   558,   560,   565,   567,
   572,   573,   578,   584,   586,   590,   592,   593,   594,   595,
   596,   600,   613,   615,   620,   622,   623,   624,   628,   630,
   634,   636,   641,   647,   653,   655,   660,   665,   667,   672,
   679,   685,   687,   691,   693,   697,   703,   714,   719,   721,
   727,   729,   730,   737,   739,   740,   741,   742,   743,   744,
   749,   754,   756,   760,   766,   768,   769,   770,   774,   779,
   784,   789,   795,   801,   807,   809,   814,   816,   821,   823,
   828,   830
};

static const char * const yytname[] = {   "$","error","$illegal.","VAR_BINDER_EXPRESSION",
"REG_EXPER","VARIABLE","ATOMIC_VARIABLE","NUMBER","STRING_LITERAL","FLOAT_LITERAL",
"INT_LITERAL","FUNCTION_NAME","ARROW_RIGHT","TYPE_NAME","BUILTIN_TYPE","CONST",
"CONST_SYMBOL","DOT","KEYWORD","COMPILED_SIGN","BUILT_IN_FUNCTION_TYPE","TYPE_SYN_CONTEXT",
"FIELD_TYPE","DIMENSION","REF_SYMBOL","ORDER_SYMBOL","COMPETITION_SPEC","OPEN_ABSRTRACT_TYPE_SCHEMA",
"CLOSE_ABSRTRACT_TYPE_SCHEMA","FUNCTION_MAP_INTRODUCER","EQUALS","RIGHT_ARROW",
"HASH_OPEN","HASH_CLOSE","ODERING_PREDICATE_OPEN","ODERING_PREDICATE_CLOSE",
"GENERATION_SEPERATOR","CARDINALITY_RESTRICTION_SYMBOL","MAP_MEMBER_INTRODUCER",
"DEREF_CONTAINER_SYMBOL","OPEN_TYPE_MACHTER","CLOSE_TYPE_MACHTER","OPEN_REGEXP_MATCHER",
"CLOSE_REGEXP_MATCHER","OPEN_WORKING_MEMORY_MATCHER","CLOSE_WORKING_MEMORY_MATCHER",
"OPEN_MEMBERSHIP_TEST_MATCHER","CLOSE_MEMBERSHIP_TEST_MATCHER","RANGE_INDICATOR_SYMBOL",
"STEPPER_INTRODUCER_SYMBOL","TYPE_OBJECT_CONTEXT","TYPE_PARTIAL_CONTEXT","TYPE_ABSTRACTION_CONTEXT",
"DERIVATION_KEY_WORD","TYPE_REPLACEMENT_VARIABLE","MEMBER_VARIABLE","UNARY_OP",
"DEREF","ARITHMETIC_OP","'('","')'","'{'","'}'","','","'<'","'>'","';'","'C'",
"'['","']'","'|'","':'","'#'","'*'","'`'","'@'","'&'","module","definitive_elements_list",
"definitive_elements","common_key_word_expression","type_definitions","function_mapping_forms",
"function_mapping_forms_signature","specialized_form_function_definitions","specialized_form_function_def_split",
"variable_definitions","constant_definitions","abstract_type_identifier","one_variable_definition",
"one_const_definition","keyword_dependent_parameters","type_name_list","parameter_list",
"variable_def_list","keyword_sequence","evaluation_list","evaluation_sequence",
"match_expression_list","dimension_list","var_type_bind_and_filter_list","initialization_expression",
"cartesian_domain","curried_return_type","mixed_types_and_values","type_name_variable_list",
"type_variable_list","map_list","evaluative_competition","synonymic_type_definition",
"well_known_type_constructor","classic_type_definition","option_type_name_list",
"partial_abstract_type_instantiation","abstract_type_schema","type_form_identifer",
"match_expession","repsonse_action","generator_expression","generation_specifier",
"range","generator_shortcuts","list_match_expression","list_rest_pattern","hash_mapper_lambda",
"data_typification","var_type_bind_and_filter","ordering_predicate","generation_calculation",
"generation_part","key_word_generation_def_list","one_var_generation_def_list",
"stepper","restricted_set_selection","set_producer_expression","deep_copy","surface_copy",
"cardinality_map","cardinality_specifier","free_form_evaluation_list","free_form_evaluation",
"dimension_specifier","map_element","mapper_element","key_source_variables",
"value_container","evaluation","member_with_accessor","member_accessor","functional_evaluation",
"expression","type_match_pattern","regular_expression","working_memory_pattern",
"membership_test","vector_constructor","matrix_constructor","matrix_components",
"vector_components","ref_syntax","deref_list",""
};
#endif

static const short yyr1[] = {     0,
    77,    78,    78,    79,    79,    79,    79,    79,    79,    80,
    80,    81,    81,    81,    81,    82,    83,    83,    84,    85,
    85,    86,    86,    87,    87,    88,    88,    88,    89,    89,
    89,    89,    90,    91,    91,    91,    92,    92,    93,    93,
    94,    94,    95,    95,    96,    96,    97,    97,    98,    98,
    99,    99,   100,   100,   101,   102,   103,   104,   104,   104,
   104,   105,   105,   105,   105,   106,   106,   107,   107,   108,
   109,   110,   110,   110,   110,   110,   111,   112,   112,   113,
   114,   115,   115,   116,   116,   116,   116,   117,   118,   118,
   118,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   120,   120,   120,   120,   121,   121,   122,   122,
   123,   123,   124,   125,   125,   126,   126,   126,   126,   126,
   126,   127,   128,   128,   129,   129,   129,   129,   130,   130,
   131,   131,   132,   133,   134,   134,   135,   136,   136,   137,
   138,   139,   139,   140,   140,   141,   142,   143,   144,   144,
   145,   145,   145,   146,   146,   146,   146,   146,   146,   146,
   147,   148,   148,   149,   150,   150,   150,   150,   151,   152,
   153,   154,   155,   156,   157,   157,   158,   158,   159,   159,
   160,   160
};

static const short yyr2[] = {     0,
     1,     1,     2,     1,     1,     1,     1,     1,     1,     7,
     4,     1,     4,     1,     1,     5,     3,     1,     6,     1,
     3,     2,     3,     1,     3,     1,     4,     1,     1,     2,
     3,     2,     3,     1,     1,     1,     1,     3,     1,     3,
     1,     3,     2,     3,     1,     1,     1,     3,     1,     2,
     1,     3,     1,     2,     2,     3,     4,     3,     3,     1,
     1,     3,     3,     1,     1,     3,     1,     1,     3,     2,
     4,     1,     1,     1,     1,     1,    11,     1,     0,     7,
     6,     1,     4,     3,     3,     3,     3,     3,     1,     3,
     3,     3,     1,    11,     5,     5,     6,     5,     3,     4,
     3,     1,     5,     6,     5,     6,     1,     2,     3,     2,
     1,     2,     2,     3,     1,     1,     3,     5,     3,     1,
     1,     3,     3,     1,     2,     1,     2,     1,     1,     2,
     1,     2,     2,     3,     1,     1,     2,     3,     3,     4,
     2,     1,     3,     1,     1,     3,     3,     3,     1,     3,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     2,     3,     4,     3,     3,     4,     1,     3,     3,
     3,     3,     3,     4,     1,     3,     1,     3,     1,     1,
     1,     2
};

static const short yydefact[] = {     0,
     0,     0,    26,    28,     0,     0,     0,     0,     0,     0,
     0,     0,     1,     2,     4,     5,     6,     7,     8,     9,
     0,    24,     0,    12,    15,    14,     0,     0,     0,     0,
     0,    43,     0,     0,     0,     0,     0,    82,     0,     3,
    29,   181,   179,    41,    22,     0,   180,     0,     0,     0,
     0,    74,    75,    76,     0,     0,    23,     0,    72,    73,
     0,     0,     0,    33,    44,     0,     0,   156,   154,   155,
     0,     0,     0,   160,   158,   136,   135,     0,   157,   159,
     0,     0,     0,    30,   182,     0,    32,    25,   156,    36,
   153,     0,     0,     0,     0,     0,     0,     0,    34,    35,
    93,    89,   107,     0,   168,    39,     0,    37,     0,    51,
     0,     0,   177,     0,     0,     0,     0,    55,     0,    71,
     0,   161,     0,     0,     0,   137,    83,     0,     0,    67,
     0,    42,    31,   151,     0,     0,     0,     0,     0,     0,
   102,   158,     0,     0,     0,     0,     0,     0,     0,   111,
     0,   110,   152,    11,     0,   108,     0,    13,     0,    27,
     0,   146,     0,   173,     0,   175,    56,     0,    16,    18,
     0,     0,   162,   144,     0,   142,   145,   139,   138,     0,
     0,     0,     0,   109,     0,   149,     0,   160,     0,     0,
     0,    68,   115,     0,     0,     0,   156,     0,     0,     0,
    92,     0,     0,   166,    91,    90,     0,     0,   112,     0,
    40,   165,    38,    52,   178,   174,     0,     0,     0,     0,
    20,    19,   163,   164,     0,    79,    65,    64,     0,    66,
    81,   167,     0,   120,   116,   121,     0,    53,   113,    99,
     0,     0,     0,     0,     0,     0,   101,     0,     0,     0,
   134,     0,     0,     0,     0,     0,    45,    46,    47,   176,
    60,     0,    61,    17,     0,   143,    78,     0,     0,     0,
    80,   150,     0,   114,    54,     0,    29,   126,     0,   124,
   128,    69,   148,   147,     0,   100,     0,     0,     0,   103,
   105,     0,     0,     0,     0,    70,    49,     0,     0,     0,
     0,    10,     0,     0,    57,     0,    21,     0,    63,    62,
     0,   119,   117,     0,   129,   125,   131,   127,    98,     0,
    96,    95,     0,     0,     0,     0,   104,   106,     0,     0,
     0,     0,    50,     0,     0,     0,     0,    48,    58,    59,
     0,     0,     0,    97,   130,   132,   123,   141,   140,     0,
   133,   169,   170,   171,   172,     0,    84,    85,    86,    87,
     0,   122,   118,     0,     0,    77,     0,    88,     0,     0,
    94,     0,     0,     0
};

static const short yydefgoto[] = {   372,
    13,    14,    74,    16,    17,   169,    18,   222,    19,    20,
   108,   278,    22,    98,   109,    99,    45,    23,   256,   257,
   296,   111,   237,    84,    62,   171,   262,   229,   131,   189,
   258,    24,    57,    25,   268,    26,    27,    28,   297,   357,
   100,   140,   101,   102,   103,   152,   190,   196,   238,   313,
   279,   280,   316,   318,   327,   141,    75,    76,    77,   251,
   324,   175,   176,   143,   192,   193,   194,   104,   105,    79,
   122,    80,   113,   298,   299,   300,   301,    59,    60,   165,
   166,    46,    47
};

static const short yypact[] = {   345,
    23,    52,   -23,-32768,    49,    97,   108,   119,    83,   137,
   140,    36,-32768,   345,-32768,-32768,-32768,-32768,-32768,-32768,
    13,    94,   101,-32768,-32768,-32768,   135,    99,   116,   100,
   139,   148,   160,   155,   283,   156,   159,-32768,   126,-32768,
   139,   152,-32768,   129,-32768,   188,-32768,   180,    29,   345,
   120,-32768,-32768,-32768,   173,   315,-32768,   130,-32768,-32768,
   120,   191,   283,-32768,-32768,   170,   120,   147,-32768,-32768,
   151,    50,   145,-32768,-32768,-32768,-32768,   153,-32768,-32768,
   199,    36,   166,-32768,-32768,    13,   139,-32768,     3,-32768,
-32768,   162,   138,    12,   275,    59,   193,   164,   163,-32768,
-32768,-32768,-32768,   148,   167,-32768,   205,   172,   174,   179,
   178,   283,   181,   168,   315,   185,    17,-32768,   235,-32768,
   197,-32768,   240,   196,   202,-32768,-32768,   209,   189,   192,
   201,-32768,-32768,-32768,    59,   283,    21,    42,   304,   207,
-32768,   231,   203,   212,   213,   231,    21,   208,   -28,-32768,
   271,-32768,-32768,   218,   315,-32768,   283,-32768,   120,-32768,
   173,-32768,   315,-32768,   220,   229,-32768,   234,-32768,-32768,
   290,     7,   147,-32768,   243,   242,-32768,-32768,-32768,   249,
   105,   105,   288,-32768,   259,   261,    56,   253,   294,    42,
   258,   266,-32768,   292,   295,   265,    73,   276,   283,   267,
-32768,   332,    42,-32768,-32768,-32768,   315,   315,-32768,   223,
-32768,-32768,-32768,-32768,-32768,-32768,   315,   200,   120,   315,
-32768,-32768,-32768,-32768,   240,   120,   282,   284,   281,-32768,
-32768,-32768,   342,   280,-32768,-32768,   293,    56,-32768,-32768,
   285,    18,   283,   347,   283,    18,-32768,   299,    18,   309,
-32768,   300,   303,   306,   132,   307,-32768,-32768,   311,-32768,
   291,   308,   316,-32768,    39,-32768,-32768,   320,   105,   105,
-32768,-32768,   134,-32768,-32768,    18,    76,    13,   348,   346,
-32768,-32768,-32768,-32768,   323,-32768,   322,   313,    18,   337,
   337,   120,   383,   385,   148,-32768,   132,   359,   360,   361,
   362,-32768,   283,   200,-32768,   200,-32768,   333,-32768,-32768,
   373,   328,-32768,   367,   148,-32768,    13,-32768,-32768,    18,
-32768,-32768,   145,   341,   334,   315,-32768,-32768,   363,   364,
   357,   358,-32768,   349,   349,   349,   349,-32768,-32768,-32768,
   345,   371,   374,-32768,-32768,-32768,-32768,-32768,-32768,   343,
-32768,-32768,-32768,-32768,-32768,   223,-32768,-32768,-32768,-32768,
   350,-32768,-32768,    42,   351,-32768,   339,-32768,    18,   352,
-32768,   414,   415,-32768
};

static const short yypgoto[] = {-32768,
   402,   -48,     1,-32768,-32768,-32768,-32768,-32768,-32768,   369,
     0,   -18,-32768,-32768,   -51,   198,   336,   387,    64,   121,
   128,   262,   190,    11,-32768,-32768,  -167,  -160,-32768,  -127,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,     9,-32768,  -224,
-32768,    57,-32768,-32768,-32768,   296,   287,  -128,-32768,    84,
  -233,-32768,   114,   113,   141,-32768,   -88,-32768,   -69,-32768,
-32768,   210,-32768,   404,-32768,-32768,   204,-32768,   -16,-32768,
   263,-32768,   -41,-32768,-32768,-32768,-32768,-32768,-32768,   217,
   382,-32768,   397
};


#define	YYLAST		439


static const short yytable[] = {    21,
    15,   107,    44,   126,   142,   146,   142,   106,   191,   116,
   200,   198,   285,    21,    15,   287,   124,    41,    78,   207,
    39,   230,   277,     6,   125,    68,   186,    69,    70,     3,
     4,    71,   134,    89,   208,    69,    70,     6,     9,    71,
   -82,    64,   314,   137,    90,     6,   118,   186,    38,    21,
    15,    42,    29,   149,   124,   325,    42,     9,    91,   121,
   234,   241,   125,   150,    31,   220,   120,    44,     3,     4,
   138,   248,   139,   135,   252,    55,   144,     9,    72,   187,
    30,    72,   151,   168,    92,    73,   347,    93,    43,    94,
   129,    73,     6,    43,    73,   144,    95,   133,   307,    96,
   187,   155,    73,    97,   156,    63,   177,   213,   309,   310,
   358,   359,   360,   211,    32,   282,   170,     3,     4,   185,
   195,   215,   195,    52,    53,    54,     9,    33,   235,   121,
   144,    34,     3,     4,   178,   370,   339,   188,   340,   188,
   212,     9,    68,    35,    69,    70,     3,     4,    71,    36,
   145,   148,    37,   281,     6,     9,    48,   281,   227,    49,
   281,    50,    51,    61,     6,   253,   254,   311,    63,   137,
    66,   292,   221,   293,   267,   294,   263,   295,   106,    55,
   228,   228,   195,    56,    67,    81,   236,   281,    82,    83,
    42,    86,    87,   259,     5,   110,   138,   115,   139,   119,
   281,    55,   117,   121,    68,    72,    69,    70,   177,   123,
    71,    73,     3,     4,   127,   128,     6,   261,   264,   130,
   136,     9,   153,   154,   157,   155,   195,    68,   284,    69,
    70,   281,   158,    71,   159,   367,   164,   236,   160,     6,
   329,   161,   162,   163,    68,   172,    69,    70,   255,   167,
    71,   173,   181,   348,   182,    92,     6,   178,   112,   317,
    72,   180,   263,   179,   263,   183,   201,   202,   228,   228,
   203,   204,   312,    73,   205,   209,   206,   315,   210,    68,
   281,    69,    70,    72,   351,    71,   259,    68,   216,    69,
    70,     6,   361,    71,   217,   332,    73,   218,   317,     6,
    72,   219,   224,   261,   225,   261,   137,   226,   197,   186,
    69,    70,   174,    73,    71,   315,   125,   231,   232,    68,
     6,    69,    70,   233,   239,    71,   240,   242,   243,   244,
    92,     6,   245,   147,   246,   139,   249,   247,    55,   259,
    21,    15,   250,    72,   269,   271,   270,   186,    73,     1,
   273,   283,   274,   304,   276,     2,    73,     3,     4,     5,
   286,     6,   187,     7,    72,     8,     9,   288,   302,   289,
    92,   290,   305,   112,   291,    72,   303,    73,   306,   308,
   319,   320,   321,   322,   323,   326,   330,   331,    73,   334,
   335,   336,   337,   341,    10,    11,    12,   342,   343,   344,
   349,   354,   350,   352,   355,   362,   353,   311,   369,   356,
   364,   366,   368,   373,   374,    40,    88,   265,    65,   365,
   371,   132,   214,   338,   333,   199,   363,   275,   345,   346,
   184,   328,    58,   260,   266,   223,   272,   114,    85
};

static const short yycheck[] = {     0,
     0,    50,    21,    73,    93,    94,    95,    49,   137,    61,
   139,   139,   246,    14,    14,   249,     5,     5,    35,    48,
    12,   182,     5,    17,    13,     5,     6,     7,     8,    13,
    14,    11,    30,     5,    63,     7,     8,    17,    22,    11,
    64,    31,   276,    32,    16,    17,    63,     6,    13,    50,
    50,    39,    30,    95,     5,   289,    39,    22,    30,    57,
     5,   190,    13,     5,    16,    59,    67,    86,    13,    14,
    59,   199,    61,    71,   203,    64,    93,    22,    61,    59,
    29,    61,    24,    67,    56,    74,   320,    59,    76,    61,
    82,    74,    17,    76,    74,   112,    68,    87,    60,    71,
    59,    63,    74,    75,   104,    30,   123,   159,   269,   270,
   335,   336,   337,   155,    18,   243,   117,    13,    14,   136,
   137,   163,   139,     8,     9,    10,    22,    20,    73,    57,
   147,    13,    13,    14,    62,   369,   304,   137,   306,   139,
   157,    22,     5,    61,     7,     8,    13,    14,    11,    13,
    94,    95,    13,   242,    17,    22,    63,   246,    54,    59,
   249,    27,    64,    64,    17,   207,   208,    34,    30,    32,
    11,    40,   172,    42,   226,    44,   218,    46,   220,    64,
   181,   182,   199,    68,    30,    30,   187,   276,    30,    64,
    39,    63,     5,   210,    15,    23,    59,    68,    61,    30,
   289,    64,    12,    57,     5,    61,     7,     8,   225,    59,
    11,    74,    13,    14,    62,    17,    17,   218,   219,    54,
    59,    22,    30,    60,    58,    63,   243,     5,   245,     7,
     8,   320,    28,    11,    63,   364,    69,   238,    65,    17,
   292,    63,    65,    63,     5,    11,     7,     8,    26,    65,
    11,    55,    64,   323,    63,    56,    17,    62,    59,   278,
    61,    53,   304,    62,   306,    65,    60,    37,   269,   270,
    68,    60,   273,    74,    62,     5,    69,   277,    61,     5,
   369,     7,     8,    61,   326,    11,   303,     5,    69,     7,
     8,    17,   341,    11,    66,   295,    74,    64,   317,    17,
    61,    12,    60,   304,    63,   306,    32,    59,     5,     6,
     7,     8,    73,    74,    11,   315,    13,    30,    60,     5,
    17,     7,     8,    63,    72,    11,    33,    70,    63,    38,
    56,    17,    38,    59,    70,    61,    70,    62,    64,   356,
   341,   341,    11,    61,    63,    65,    63,     6,    74,     5,
    71,     5,    60,    63,    70,    11,    74,    13,    14,    15,
    62,    17,    59,    19,    61,    21,    22,    59,    62,    70,
    56,    69,    65,    59,    69,    61,    66,    74,    63,    60,
    33,    36,    60,    62,    72,    49,     4,     3,    74,    31,
    31,    31,    31,    61,    50,    51,    52,    25,    71,    33,
    60,    45,    69,    41,    47,    35,    43,    34,    70,    61,
    68,    62,    62,     0,     0,    14,    48,   220,    32,   356,
    69,    86,   161,   303,   297,   139,   343,   238,   315,   317,
   135,   291,    29,   217,   225,   173,   233,    56,    42
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_Parser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_Parser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_Parser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_Parser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_Parser_CHAR = (token), YY_Parser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_Parser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_Parser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_Parser_PURE
/* UNPURE */
#define YYLEX           YY_Parser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_Parser_CHAR;                      /*  the lookahead symbol        */
YY_Parser_STYPE      YY_Parser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_Parser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_Parser_LSP_NEEDED
YY_Parser_LTYPE YY_Parser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_Parser_LSP_NEEDED
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL, &YY_Parser_LLOC)
#else
#define YYLEX           YY_Parser_LEX(&YY_Parser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_Parser_DEBUG != 0
int YY_Parser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_Parser_CLASS::
#endif
     YY_Parser_PARSE(YY_Parser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_Parser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_Parser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_Parser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_Parser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_Parser_LTYPE *yyls = yylsa;
  YY_Parser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_Parser_PURE
  int YY_Parser_CHAR;
  YY_Parser_STYPE YY_Parser_LVAL;
  int YY_Parser_NERRS;
#ifdef YY_Parser_LSP_NEEDED
  YY_Parser_LTYPE YY_Parser_LLOC;
#endif
#endif

  YY_Parser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_Parser_NERRS = 0;
  YY_Parser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_Parser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_Parser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_Parser_LSP_NEEDED
      YY_Parser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_Parser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_Parser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_Parser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_Parser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_Parser_LSP_NEEDED
      yyls = (YY_Parser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_Parser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_Parser_CHAR == YYEMPTY)
    {
#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_Parser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_Parser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_Parser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_Parser_CHAR);

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_Parser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_Parser_CHAR, YY_Parser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_Parser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_Parser_CHAR != YYEOF)
    YY_Parser_CHAR = YYEMPTY;

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_Parser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_Parser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_Parser_LLOC.first_line;
      yylsp->first_column = YY_Parser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_Parser_NERRS;

#ifdef YY_Parser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_Parser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_Parser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_Parser_ERROR_VERBOSE */
	YY_Parser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_Parser_CHAR == YYEOF)
	YYABORT;

#if YY_Parser_DEBUG != 0
      if (YY_Parser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_Parser_CHAR, yytname[yychar1]);
#endif

      YY_Parser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_Parser_LSP_NEEDED
  yylsp--;
#endif

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_Parser_DEBUG != 0
  if (YY_Parser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_Parser_LVAL;
#ifdef YY_Parser_LSP_NEEDED
  *++yylsp = YY_Parser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 834 "acai.y"



